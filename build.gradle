/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    // *** Q-Type error 때문에 추가 *** //
    id "io.franzbecker.gradle-lombok" version "3.0.0"
}

repositories {
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

group = 'com.moment'
version = '0.0.1-SNAPSHOT'
description = 'the'
java.sourceCompatibility = JavaVersion.VERSION_11

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Swagger
    implementation 'io.springfox:springfox-swagger-ui:2.9.1'
    implementation 'io.springfox:springfox-swagger2:2.9.1'
    implementation 'io.swagger:swagger-annotations:1.6.2'
    implementation 'io.swagger:swagger-models:1.6.2'

    // JWT토큰 관련 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.1'

    // modelMapper
    implementation 'org.modelmapper:modelmapper:2.3.0'

    implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'

    implementation 'io.fabric8:docker-maven-plugin:0.30.0'

    // lombok
    implementation 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    // *** querydsl *** //
    implementation 'com.querydsl:querydsl-jpa'
}

//querydsl
def querydslDir = "$buildDir/generated/querydsl" as String
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

test {
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.required = true
        csv.required = false
        xml.required = false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/exception/**'
                    ,'**/dto/**'
                    ,'**/repository/**' // DAO(repository)
                    ,'**/embeddedTypes/**' //embeddedTypes 제거
                    ,'**/the/TheApplication*'
                    ,'**/the/**/*Test*'
                    ,'**/the/**/Q*' // Q class 제거
            ])
        })
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 룰을 키고 끌 수 있다.
            enabled = false

            // 룰을 체크할 단위
            element = 'BUNDLE'

            // Java 바이트코드 를 통한 코드실행
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}